Recursive:
T.c -- O(n)
S.c --> O(h)
class Solution {
    public Node connect(Node root) {
        if(root == null){
            return null;
        }
        Node root1 = root;
        dfs(root1);
      return root1;
    }
    private void dfs(Node root){
       if(root.left == null){
        return;
       } 
       root.left.next = root.right;
       if(root.next != null){
        root.right.next = root.next.left;
       } 
       dfs(root.left);
       dfs(root.right);
    }
}
****************************************************
Iterative:
T.c -- O(n)
S.c --> O(1)
class Solution {
    public Node connect(Node root) {
        if(root == null){
            return null;
        }
        Node left = root;
        while(left.left != null){
            Node curr = left;
            while(curr != null){
              curr.left.next = curr.right;
              if(curr.next != null){
               curr.right.next = curr.next.left;
              }
              curr = curr.next;
            }
            left = left.left;
        } 
       return root;
    }
}
****************************************************
Queue:
T.c --> O(n)
S.c --> O(n)
class Solution {
    public Node connect(Node root) {
        if(root == null){
            return null;
        }
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i =0; i<size; i++){
                Node curr = q.poll();
                if(i < size-1){
                   curr.next = q.peek();
                }
                if(curr.left != null){
                    q.add(curr.left);
                    q.add(curr.right);
                }
            }
        } 
       return root;
    }
}